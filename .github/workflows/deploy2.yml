---
name: Deploy

on:
  # Enable manual running of action if necessary
  workflow_dispatch:
    inputs:
      reason:
        required: true
        description: "Reason for running this workflow"
      disable_upstream_triggers:
        required: false
        type: boolean
        description: "Rebuild the base images but don't trigger downstream builds"
        default: false
  # Build and deploy the image on pushes to main branch
  push:
    # Only publish on push to main branch
    branches:
      - main
    # Don't trigger if it's just a documentation update
    paths-ignore:
      - "**.md"
      - "**.MD"
      - "**.yml"
      - "LICENSE"
      - ".gitattributes"
      - ".gitignore"
      - ".dockerignore"
  repository_dispatch:
    types: build_on_wreadsb_update

  # Build and deploy the image nightly (to ensure we pick up any security updates)
  # schedule:
  #   - cron: "0 12 * * *"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  hadolint:
    name: Run hadolint against docker files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint --ignore DL3003 --ignore DL3006 --ignore DL3010 --ignore DL4001 --ignore DL3007 --ignore DL3008 --ignore SC2068 --ignore DL3007 --ignore SC1091 --ignore DL3013 --ignore DL3010 $(find . -type f -iname "Dockerfile*")

  deploy_ghcr_base:
    name: Deploy base image to ghcr.io
    needs: [hadolint]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Build & Push Dockerfile (only push if this action was NOT triggered by a PR)
      - name: Build & Push ghcr.io/ngtrthanh/docker-baseimage:base
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.base
          no-cache: true
          platforms: linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/ngtrthanh/docker-baseimage:base
          labels: ${{ steps.meta.outputs.labels }}

  deploy_ghcr_python:
    name: Deploy python to ghcr.io
    runs-on: ubuntu-latest
    needs: [deploy_ghcr_base]
    permissions:
      contents: read
      packages: write

    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Get changed files
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v39.2.2

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      # Build & Push Dockerfile.python (only push if this action was NOT triggered by a PR)
      - name: Build & Push ghcr.io/ngtrthanh/docker-baseimage:python
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.python
          no-cache: true
          platforms: linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/ngtrthanh/docker-baseimage:python
          labels: ${{ steps.meta.outputs.labels }}

  deploy_ghcr_rtlsdr:
    name: Deploy rtlsdr to ghcr.io
    runs-on: ubuntu-latest
    needs: [deploy_ghcr_base]
    permissions:
      contents: read
      packages: write

    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      # Build & Push Dockerfile.rtlsdr (only push if this action was NOT triggered by a PR)
      - name: Build & Push ghcr.io/ngtrthanh/docker-baseimage:rtlsdr
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.rtlsdr
          no-cache: true
          platforms: linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/ngtrthanh/docker-baseimage:rtlsdr
          labels: ${{ steps.meta.outputs.labels }}

  deploy_ghcr_readsb-netonly:
    name: Deploy readsb-netonly to ghcr.io
    runs-on: ubuntu-latest
    needs: [deploy_ghcr_base]
    permissions:
      contents: read
      packages: write

    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      # Build & Push Dockerfile.readsb-netonly (only push if this action was NOT triggered by a PR)
      - name: Build & Push ghcr.io/ngtrthanh/docker-baseimage:readsb-netonly
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.readsb-netonly
          no-cache: true
          platforms: linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/ngtrthanh/docker-baseimage:readsb-netonly
          labels: ${{ steps.meta.outputs.labels }}

  deploy_ghcr_readsb-full:
    name: Deploy readsb-full to ghcr.io
    runs-on: ubuntu-latest
    needs: [deploy_ghcr_base, deploy_ghcr_rtlsdr]
    permissions:
      contents: read
      packages: write

    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Build & Push Dockerfile.readsb-full (only push if this action was NOT triggered by a PR)
      - name: Build & Push ghcr.io/ngtrthanh/docker-baseimage:readsb-full
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.readsb-full
          no-cache: true
          platforms: linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/ngtrthanh/docker-baseimage:readsb-full
          labels: ${{ steps.meta.outputs.labels }}


  deploy_wreadsb:
    name: Deploy wreadsb to ghcr.io
    needs: [deploy_ghcr_rtlsdr]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Build & Push Dockerfile (only push if this action was NOT triggered by a PR)
      - name: Build & Push ghcr.io/ngtrthanh/docker-baseimage:wreadsb
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.wreadsb
          no-cache: true
          platforms: linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/ngtrthanh/docker-baseimage:wreadsb
          labels: ${{ steps.meta.outputs.labels }}

  deploy_qemu:
    name: Deploy qemu to ghcr.io
    needs: [deploy_ghcr_base]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Check out our code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Log into ghcr (so we can push images)
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Get metadata from repo
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # Build & Push Dockerfile (only push if this action was NOT triggered by a PR)
      - name: Build & Push ghcr.io/ngtrthanh/docker-baseimage:qemu
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.qemu
          no-cache: true
          platforms: linux/amd64,linux/arm/v7,linux/arm/v6,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/ngtrthanh/docker-baseimage:qemu
          labels: ${{ steps.meta.outputs.labels }}

  trigger_build_ngtrthanh_docker-readsb-protobuf:
    name: Trigger deploy of ngtrthanh/docker-readsb-protobuf
    needs: [deploy_ghcr_readsb-full]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.disable_upstream_triggers != 'true' }}
    env:
      WORKFLOW_AUTH_TOKEN: ${{ secrets.GH_PAT_NTT }}
      WORKFLOW_REPO: ngtrthanh/docker-readsb-protobuf
      WORKFLOW_FILE: deploy.yml
      WORKFLOW_REASON: "triggered via deploy_ghcr.yml in ngtrthanh/docker-baseimage"
    steps:
      - name: Trigger ${{ env.WORKFLOW_FILE }} in ${{ env.WORKFLOW_REPO }}
        run: |
          echo "$WORKFLOW_AUTH_TOKEN" | gh auth login --with-token
          gh workflow run --ref main --repo "$WORKFLOW_REPO" "$WORKFLOW_FILE" -f reason="$WORKFLOW_REASON"



 
